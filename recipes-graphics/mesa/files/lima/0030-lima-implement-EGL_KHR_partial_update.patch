From 117e14e5e5a718057f1598ffc5bb000e51fa1138 Mon Sep 17 00:00:00 2001
From: Qiang Yu <yuq825@gmail.com>
Date: Sun, 2 Sep 2018 19:03:35 +0800
Subject: [PATCH 30/52] lima: implement EGL_KHR_partial_update

Method is only pick pp stream for damaged region,
so that fb outside damage region don't need reload.

In fact only fb between damaged region and tile
unit boundary (when damage region not aligned to
tile buffer) need to be reloaded.

Signed-off-by: Qiang Yu <yuq825@gmail.com>
---
 src/gallium/drivers/lima/lima_context.h |   8 +-
 src/gallium/drivers/lima/lima_draw.c    | 196 ++++++++++++++++++++++++--------
 src/gallium/drivers/lima/lima_state.c   |   4 +-
 3 files changed, 157 insertions(+), 51 deletions(-)

diff --git a/src/gallium/drivers/lima/lima_context.h b/src/gallium/drivers/lima/lima_context.h
index 2a001e7..11320c9 100644
--- a/src/gallium/drivers/lima/lima_context.h
+++ b/src/gallium/drivers/lima/lima_context.h
@@ -159,6 +159,12 @@ struct lima_damage_state {
    bool aligned;
 };
 
+struct lima_pp_stream_state {
+   struct lima_bo *bo;
+   uint32_t bo_offset;
+   uint32_t offset[8];
+};
+
 struct lima_context {
    struct pipe_context base;
 
@@ -201,6 +207,7 @@ struct lima_context {
    struct lima_context_constant_buffer const_buffer[PIPE_SHADER_TYPES];
    struct lima_texture_stateobj tex_stateobj;
    struct lima_damage_state damage;
+   struct lima_pp_stream_state pp_stream;
 
    #define LIMA_CTX_PLB_MIN_NUM  1
    #define LIMA_CTX_PLB_MAX_NUM  4
@@ -213,7 +220,6 @@ struct lima_context {
    struct lima_bo *plb[LIMA_CTX_PLB_MAX_NUM];
    struct lima_bo *plb_gp_stream;
    struct hash_table *plb_pp_stream;
-   struct lima_ctx_plb_pp_stream *current_plb_pp_stream;
    uint32_t plb_index;
 
    struct lima_ctx_buff_state buffer_state[lima_ctx_buff_num];
diff --git a/src/gallium/drivers/lima/lima_draw.c b/src/gallium/drivers/lima/lima_draw.c
index c57e824..603c77d 100644
--- a/src/gallium/drivers/lima/lima_draw.c
+++ b/src/gallium/drivers/lima/lima_draw.c
@@ -163,28 +163,21 @@ hilbert_coords(int n, int d, int *x, int *y)
    }
 }
 
-static void
-lima_update_plb(struct lima_context *ctx, struct lima_ctx_plb_pp_stream *s)
+static int
+lima_get_pp_stream_size(int num_pp, int tiled_w, int tiled_h, uint32_t *off)
 {
-   struct lima_context_framebuffer *fb = &ctx->framebuffer;
-   struct lima_screen *screen = lima_screen(ctx->base.screen);
-
-   if (s->bo)
-      return;
-
    /* carefully calculate each stream start address:
     * 1. overflow: each stream size may be different due to
     *    fb->tiled_w * fb->tiled_h can't be divided by num_pp,
     *    extra size should be added to the preceeding stream
     * 2. alignment: each stream address should be 0x20 aligned
     */
-   int i, num_pp = screen->num_pp;
-   int delta = fb->tiled_w * fb->tiled_h / num_pp * 16 + 8;
-   int remain = fb->tiled_w * fb->tiled_h % num_pp;
+   int delta = tiled_w * tiled_h / num_pp * 16 + 8;
+   int remain = tiled_w * tiled_h % num_pp;
    int offset = 0;
 
-   for (i = 0; i < num_pp; i++) {
-      s->offset[i] = offset;
+   for (int i = 0; i < num_pp; i++) {
+      off[i] = offset;
 
       offset += delta;
       if (remain) {
@@ -194,15 +187,40 @@ lima_update_plb(struct lima_context *ctx, struct lima_ctx_plb_pp_stream *s)
       offset = align(offset, 0x20);
    }
 
-   unsigned size = align(offset, LIMA_PAGE_SIZE);
-   s->bo = lima_bo_create(screen, size, 0, true, true);
+   return offset;
+}
+
+static bool
+inside_damage_region(int x, int y, struct lima_damage_state *ds)
+{
+   if (!ds->region)
+      return true;
+
+   for (int i = 0; i < ds->num_region; i++) {
+      struct pipe_scissor_state *ss = ds->region + i;
+      if (x >= ss->minx && x < ss->maxx &&
+          y >= ss->miny && y < ss->maxy)
+         return true;
+   }
+
+   return false;
+}
+
+static void
+lima_update_pp_stream(struct lima_context *ctx, int off_x, int off_y,
+                      int tiled_w, int tiled_h)
+{
+   struct lima_pp_stream_state *ps = &ctx->pp_stream;
+   struct lima_context_framebuffer *fb = &ctx->framebuffer;
+   struct lima_screen *screen = lima_screen(ctx->base.screen);
+   int i, num_pp = screen->num_pp;
 
    /* use hilbert_coords to generates 1D to 2D relationship.
     * 1D for pp stream index and 2D for plb block x/y on framebuffer.
     * if multi pp, interleave the 1D index to make each pp's render target
     * close enough which should result close workload
     */
-   int max = MAX2(fb->tiled_w, fb->tiled_h);
+   int max = MAX2(tiled_w, tiled_h);
    int dim = util_logbase2_ceil(max);
    int count = 1 << (dim + dim);
    int index = 0;
@@ -210,16 +228,22 @@ lima_update_plb(struct lima_context *ctx, struct lima_ctx_plb_pp_stream *s)
    int si[4] = {0};
 
    for (i = 0; i < num_pp; i++)
-      stream[i] = s->bo->map + s->offset[i];
+      stream[i] = ps->bo->map + ps->bo_offset + ps->offset[i];
 
    for (i = 0; i < count; i++) {
       int x, y;
       hilbert_coords(max, i, &x, &y);
-      if (x < fb->tiled_w && y < fb->tiled_h) {
+      if (x < tiled_w && y < tiled_h) {
+         x += off_x;
+         y += off_y;
+
+         if (!inside_damage_region(x, y, &ctx->damage))
+            continue;
+
          int pp = index % num_pp;
          int offset = ((y >> fb->shift_h) * fb->block_w +
                        (x >> fb->shift_w)) * LIMA_CTX_PLB_BLK_SIZE;
-         int plb_va = ctx->plb[s->key.plb_index]->va + offset;
+         int plb_va = ctx->plb[ctx->plb_index]->va + offset;
 
          stream[pp][si[pp]++] = 0;
          stream[pp][si[pp]++] = 0xB8000000 | x | (y << 8);
@@ -236,10 +260,82 @@ lima_update_plb(struct lima_context *ctx, struct lima_ctx_plb_pp_stream *s)
 
       lima_dump_command_stream_print(
          stream[i], si[i] * 4, false, "pp plb stream %d at va %x\n",
-         i, s->bo->va + s->offset[i]);
+         i, ps->bo->va + ps->bo_offset + ps->offset[i]);
    }
 }
 
+static void
+lima_update_damage_pp_stream(struct lima_context *ctx)
+{
+   struct lima_damage_state *ds = &ctx->damage;
+   struct pipe_scissor_state max = ds->region[0];
+
+   /* find a max region to cover all the damage region */
+   for (int i = 1; i < ds->num_region; i++) {
+      struct pipe_scissor_state *ss = ds->region + i;
+      max.minx = MIN2(max.minx, ss->minx);
+      max.miny = MIN2(max.miny, ss->miny);
+      max.maxx = MAX2(max.maxx, ss->maxx);
+      max.maxy = MAX2(max.maxy, ss->maxy);
+   }
+
+   int tiled_w = max.maxx - max.minx;
+   int tiled_h = max.maxy - max.miny;
+   struct lima_screen *screen = lima_screen(ctx->base.screen);
+   int size = lima_get_pp_stream_size(
+      screen->num_pp, tiled_w, tiled_h, ctx->pp_stream.offset);
+
+   void *cpu;
+   unsigned offset;
+   struct pipe_resource *pres = NULL;
+   u_upload_alloc(ctx->uploader, 0, size, 0x40, &offset, &pres, &cpu);
+
+   struct lima_resource *res = lima_resource(pres);
+   lima_bo_update(res->bo, false, true);
+   ctx->pp_stream.bo = res->bo;
+   ctx->pp_stream.bo_offset = offset;
+
+   lima_update_pp_stream(ctx, max.minx, max.miny, tiled_w, tiled_h);
+
+   lima_submit_add_bo(ctx->pp_submit, res->bo, LIMA_SUBMIT_BO_READ);
+   pipe_resource_reference(&pres, NULL);
+}
+
+static void
+lima_update_full_pp_stream(struct lima_context *ctx)
+{
+   struct lima_context_framebuffer *fb = &ctx->framebuffer;
+   struct lima_ctx_plb_pp_stream_key key = {
+      .plb_index = ctx->plb_index,
+      .tiled_w = fb->tiled_w,
+      .tiled_h = fb->tiled_h,
+   };
+
+   struct hash_entry *entry =
+      _mesa_hash_table_search(ctx->plb_pp_stream, &key);
+   struct lima_ctx_plb_pp_stream *s = entry->data;
+
+   if (s->bo) {
+      ctx->pp_stream.bo = s->bo;
+      ctx->pp_stream.bo_offset = 0;
+      memcpy(ctx->pp_stream.offset, s->offset, sizeof(s->offset));
+   }
+   else {
+      struct lima_screen *screen = lima_screen(ctx->base.screen);
+      int size = lima_get_pp_stream_size(
+         screen->num_pp, fb->tiled_w, fb->tiled_h, s->offset);
+      s->bo = lima_bo_create(screen, size, 0, true, true);
+
+      ctx->pp_stream.bo = s->bo;
+      ctx->pp_stream.bo_offset = 0;
+      memcpy(ctx->pp_stream.offset, s->offset, sizeof(s->offset));
+
+      lima_update_pp_stream(ctx, 0, 0, fb->tiled_w, fb->tiled_h);
+   }
+
+   lima_submit_add_bo(ctx->pp_submit, s->bo, LIMA_SUBMIT_BO_READ);
+}
+
 enum lima_attrib_type {
    LIMA_ATTRIB_FLOAT = 0x000,
    /* todo: find out what lives here. */
@@ -518,8 +614,16 @@ lima_pack_plbu_cmd(struct lima_context *ctx, const struct pipe_draw_info *info)
       plbu_cmd[i++] = ctx->plb_gp_stream->va + ctx->plb_index * ctx->plb_gp_size;
       plbu_cmd[i++] = 0x28000000 | (fb->block_w * fb->block_h - 1); /* PLBU_ARRAY_ADDRESS */
 
-      if (surf->reload)
-         i = lima_pack_reload_plbu_cmd(ctx, plbu_cmd, i);
+      if (ctx->damage.region) {
+         /* for EGL_KHR_partial_update we just want to reload the
+          * region not aligned to tile boundary */
+         if (!ctx->damage.aligned)
+            i = lima_pack_reload_plbu_cmd(ctx, plbu_cmd, i);
+      }
+      else {
+         if (surf->reload)
+            i = lima_pack_reload_plbu_cmd(ctx, plbu_cmd, i);
+      }
 
       plbu_cmd[i++] = fui(ctx->viewport.x);
       plbu_cmd[i++] = 0x10000107; /* VIEWPORT_X */
@@ -1050,21 +1154,12 @@ lima_update_submit_bo(struct lima_context *ctx)
          ctx->plb_gp_size, false, "gp plb stream at va %x\n",
          ctx->plb_gp_stream->va + ctx->plb_index * ctx->plb_gp_size);
 
-      if (ctx->plb_pp_stream) {
-         struct lima_ctx_plb_pp_stream_key key = {
-            .plb_index = ctx->plb_index,
-            .tiled_w = ctx->framebuffer.tiled_w,
-            .tiled_h = ctx->framebuffer.tiled_h,
-         };
-
-         struct hash_entry *entry =
-            _mesa_hash_table_search(ctx->plb_pp_stream, &key);
-         struct lima_ctx_plb_pp_stream *s = entry->data;
-         lima_update_plb(ctx, s);
-         ctx->current_plb_pp_stream = s;
-
-         lima_submit_add_bo(ctx->pp_submit, s->bo, LIMA_SUBMIT_BO_READ);
-      }
+      if (ctx->damage.region)
+         lima_update_damage_pp_stream(ctx);
+      else if (ctx->plb_pp_stream)
+         lima_update_full_pp_stream(ctx);
+      else
+         ctx->pp_stream.bo = NULL;
 
       struct lima_resource *res = lima_resource(ctx->framebuffer.cbuf->texture);
       lima_submit_add_bo(ctx->pp_submit, res->bo, LIMA_SUBMIT_BO_WRITE);
@@ -1256,35 +1351,40 @@ _lima_flush(struct lima_context *ctx, bool end_of_frame)
          fprintf(stderr, "gp submit wait error\n");
    }
 
+   struct lima_pp_stream_state *ps = &ctx->pp_stream;
    if (screen->gpu_type == LIMA_INFO_GPU_MALI400) {
       struct drm_lima_m400_pp_frame pp_frame = {0};
       lima_pack_pp_frame_reg(ctx, pp_frame.frame, pp_frame.wb);
       pp_frame.num_pp = screen->num_pp;
 
-      struct lima_ctx_plb_pp_stream *s = ctx->current_plb_pp_stream;
       for (int i = 0; i < screen->num_pp; i++)
-         pp_frame.plbu_array_address[i] = s->bo->va + s->offset[i];
+         pp_frame.plbu_array_address[i] = ps->bo->va + ps->bo_offset + ps->offset[i];
 
       lima_dump_command_stream_print(
          &pp_frame, sizeof(pp_frame), false, "add pp frame\n");
 
       if (!lima_submit_start(ctx->pp_submit, &pp_frame, sizeof(pp_frame)))
          fprintf(stderr, "pp submit error\n");
-
-      ctx->current_plb_pp_stream = NULL;
    }
    else {
       struct drm_lima_m450_pp_frame pp_frame = {0};
       lima_pack_pp_frame_reg(ctx, pp_frame.frame, pp_frame.wb);
       pp_frame.num_pp = screen->num_pp;
-      pp_frame.use_dlbu = true;
 
-      struct lima_context_framebuffer *fb = &ctx->framebuffer;
-      pp_frame.dlbu_regs[0] = ctx->plb[ctx->plb_index]->va;
-      pp_frame.dlbu_regs[1] = ((fb->tiled_h - 1) << 16) | (fb->tiled_w - 1);
-      unsigned s = util_logbase2(LIMA_CTX_PLB_BLK_SIZE) - 7;
-      pp_frame.dlbu_regs[2] = (s << 28) | (fb->shift_h << 16) | fb->shift_w;
-      pp_frame.dlbu_regs[3] = ((fb->tiled_h - 1) << 24) | ((fb->tiled_w - 1) << 16);
+      if (ps->bo) {
+         for (int i = 0; i < screen->num_pp; i++)
+            pp_frame.plbu_array_address[i] = ps->bo->va + ps->bo_offset + ps->offset[i];
+      }
+      else {
+         pp_frame.use_dlbu = true;
+
+         struct lima_context_framebuffer *fb = &ctx->framebuffer;
+         pp_frame.dlbu_regs[0] = ctx->plb[ctx->plb_index]->va;
+         pp_frame.dlbu_regs[1] = ((fb->tiled_h - 1) << 16) | (fb->tiled_w - 1);
+         unsigned s = util_logbase2(LIMA_CTX_PLB_BLK_SIZE) - 7;
+         pp_frame.dlbu_regs[2] = (s << 28) | (fb->shift_h << 16) | fb->shift_w;
+         pp_frame.dlbu_regs[3] = ((fb->tiled_h - 1) << 24) | ((fb->tiled_w - 1) << 16);
+      }
 
       lima_dump_command_stream_print(
          &pp_frame, sizeof(pp_frame), false, "add pp frame\n");
diff --git a/src/gallium/drivers/lima/lima_state.c b/src/gallium/drivers/lima/lima_state.c
index ca4f40c..a6b9bab 100644
--- a/src/gallium/drivers/lima/lima_state.c
+++ b/src/gallium/drivers/lima/lima_state.c
@@ -500,8 +500,8 @@ lima_set_damage_region(struct pipe_context *pctx, unsigned num_rects, int *rects
       /* region in tile unit */
       r->minx = rects[i * 4] >> 4;
       r->miny = rects[i * 4 + 1] >> 4;
-      r->maxx = (rects[i * 4 + 2] + 0xf) >> 4;
-      r->maxy = (rects[i * 4 + 3] + 0xf) >> 4;
+      r->maxx = (rects[i * 4] + rects[i * 4 + 2] + 0xf) >> 4;
+      r->maxy = (rects[i * 4 + 1] + rects[i * 4 + 3] + 0xf) >> 4;
    }
 
    /* is region aligned to tiles? */
-- 
2.0.1

