From 5344d6bc289b50fce652d90d1832163d69756c46 Mon Sep 17 00:00:00 2001
From: Qiang Yu <yuq825@gmail.com>
Date: Sun, 5 Aug 2018 10:36:14 +0800
Subject: [PATCH 20/52] st/dri2: use dynamic alloc extensions

When optional extension increases, use static extension
is not good. This is for the following adding another
optional extension.

Signed-off-by: Qiang Yu <yuq825@gmail.com>
---
 src/gallium/state_trackers/dri/dri2.c | 30 ++++++++++++------------------
 1 file changed, 12 insertions(+), 18 deletions(-)

diff --git a/src/gallium/state_trackers/dri/dri2.c b/src/gallium/state_trackers/dri/dri2.c
index 2ac3220..5f50de3 100644
--- a/src/gallium/state_trackers/dri/dri2.c
+++ b/src/gallium/state_trackers/dri/dri2.c
@@ -2057,20 +2057,6 @@ static const __DRIextension *dri_screen_extensions[] = {
    NULL
 };
 
-static const __DRIextension *dri_robust_screen_extensions[] = {
-   &driTexBufferExtension.base,
-   &dri2FlushExtension.base,
-   &dri2ImageExtension.base,
-   &dri2RendererQueryExtension.base,
-   &dri2GalliumConfigQueryExtension.base,
-   &dri2ThrottleExtension.base,
-   &dri2FenceExtension.base,
-   &dri2InteropExtension.base,
-   &dri2Robustness.base,
-   &dri2NoErrorExtension.base,
-   NULL
-};
-
 /**
  * This is the driver specific part of the createNewScreen entry point.
  *
@@ -2084,12 +2070,21 @@ dri2_init_screen(__DRIscreen * sPriv)
    struct pipe_screen *pscreen = NULL;
    const struct drm_conf_ret *throttle_ret;
    const struct drm_conf_ret *dmabuf_ret;
+   const int num_optional_extensions = 1;
+   const int num_extensions =
+      ARRAY_SIZE(dri_screen_extensions) + num_optional_extensions;
+   const __DRIextension **extensions, **optional_extensions;
    int fd;
 
-   screen = CALLOC_STRUCT(dri_screen);
+   screen = CALLOC(1, sizeof(*screen) + sizeof(*extensions) * num_extensions);
    if (!screen)
       return NULL;
 
+   extensions = (const __DRIextension **)(screen + 1);
+   memcpy(extensions, dri_screen_extensions, sizeof(dri_screen_extensions));
+   optional_extensions = extensions + ARRAY_SIZE(dri_screen_extensions) - 1;
+   sPriv->extensions = extensions;
+
    screen->sPriv = sPriv;
    screen->fd = sPriv->fd;
    (void) mtx_init(&screen->opencl_func_mutex, mtx_plain);
@@ -2138,11 +2133,10 @@ dri2_init_screen(__DRIscreen * sPriv)
    }
 
    if (pscreen->get_param(pscreen, PIPE_CAP_DEVICE_RESET_STATUS_QUERY)) {
-      sPriv->extensions = dri_robust_screen_extensions;
+      *optional_extensions = &dri2Robustness.base;
       screen->has_reset_status_query = true;
+      optional_extensions++;
    }
-   else
-      sPriv->extensions = dri_screen_extensions;
 
    configs = dri_init_screen_helper(screen, pscreen);
    if (!configs)
-- 
2.0.1

