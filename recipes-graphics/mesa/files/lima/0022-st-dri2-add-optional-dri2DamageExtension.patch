From 5519406ce607923dadd6517a08116dc9019185a6 Mon Sep 17 00:00:00 2001
From: Qiang Yu <yuq825@gmail.com>
Date: Sun, 5 Aug 2018 20:17:48 +0800
Subject: [PATCH 22/52] st/dri2: add optional dri2DamageExtension

Enable dri2DamageExtension according to
PIPE_CAP_SET_DAMAGE.

Signed-off-by: Qiang Yu <yuq825@gmail.com>
---
 src/gallium/include/pipe/p_context.h  | 12 ++++++++++++
 src/gallium/state_trackers/dri/dri2.c | 24 ++++++++++++++++++++++--
 2 files changed, 34 insertions(+), 2 deletions(-)

diff --git a/src/gallium/include/pipe/p_context.h b/src/gallium/include/pipe/p_context.h
index 7cf037f..be73e24 100644
--- a/src/gallium/include/pipe/p_context.h
+++ b/src/gallium/include/pipe/p_context.h
@@ -927,6 +927,18 @@ struct pipe_context {
     */
    void (*callback)(struct pipe_context *ctx, void (*fn)(void *), void *data,
                     bool asap);
+
+   /**
+    * Set draw damage region
+    *
+    * For implementing EGL_KHR_partial_update. This is a hint for
+    * driver to skip un-damaged region re-draw as an optimization.
+    *
+    * \param ctx        pipe context
+    * \param num_rects  number of rectangles
+    * \patam rects      rectangle array
+    */
+   boolean (*set_damage_region)(struct pipe_context *ctx, unsigned num_rects, int *rects);
 };
 
 
diff --git a/src/gallium/state_trackers/dri/dri2.c b/src/gallium/state_trackers/dri/dri2.c
index 5f50de3..8d40a46 100644
--- a/src/gallium/state_trackers/dri/dri2.c
+++ b/src/gallium/state_trackers/dri/dri2.c
@@ -2040,6 +2040,21 @@ static const __DRI2configQueryExtension dri2GalliumConfigQueryExtension = {
    .configQueryf        = dri2GalliumConfigQueryf,
 };
 
+static GLboolean
+dri2SetDamageRegion(__DRIcontext *context, GLuint size, GLint *rects)
+{
+   struct dri_context *ctx = dri_context(context);
+   struct pipe_context *pipe = ctx->st->pipe;
+
+   return pipe->set_damage_region(pipe, size, rects);
+}
+
+static const __DRI2damageExtension dri2DamageExtension = {
+   .base = { __DRI2_DAMAGE, 1 },
+
+   .set_damage_region   = dri2SetDamageRegion,
+};
+
 /*
  * Backend function init_screen.
  */
@@ -2070,7 +2085,7 @@ dri2_init_screen(__DRIscreen * sPriv)
    struct pipe_screen *pscreen = NULL;
    const struct drm_conf_ret *throttle_ret;
    const struct drm_conf_ret *dmabuf_ret;
-   const int num_optional_extensions = 1;
+   const int num_optional_extensions = 2;
    const int num_extensions =
       ARRAY_SIZE(dri_screen_extensions) + num_optional_extensions;
    const __DRIextension **extensions, **optional_extensions;
@@ -2133,8 +2148,13 @@ dri2_init_screen(__DRIscreen * sPriv)
    }
 
    if (pscreen->get_param(pscreen, PIPE_CAP_DEVICE_RESET_STATUS_QUERY)) {
-      *optional_extensions = &dri2Robustness.base;
       screen->has_reset_status_query = true;
+      *optional_extensions = &dri2Robustness.base;
+      optional_extensions++;
+   }
+
+   if (pscreen->get_param(pscreen, PIPE_CAP_SET_DAMAGE)) {
+      *optional_extensions = &dri2DamageExtension.base;
       optional_extensions++;
    }
 
-- 
2.0.1

