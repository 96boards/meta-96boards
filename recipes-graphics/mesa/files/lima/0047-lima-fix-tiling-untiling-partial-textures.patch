From 093b96111f93d710babc658e7f8b40339166378f Mon Sep 17 00:00:00 2001
From: Vasily Khoruzhick <anarsoul@gmail.com>
Date: Mon, 12 Nov 2018 10:26:31 -0800
Subject: [PATCH 47/52] lima: fix tiling/untiling partial textures

staging size is smaller than actual texture, so we need to take it
into account.

Signed-off-by: Vasily Khoruzhick <anarsoul@gmail.com>
---
 src/gallium/drivers/lima/lima_tiling.c | 32 ++++++++++++++++----------------
 1 file changed, 16 insertions(+), 16 deletions(-)

diff --git a/src/gallium/drivers/lima/lima_tiling.c b/src/gallium/drivers/lima/lima_tiling.c
index 12e5c79..fd548a5 100644
--- a/src/gallium/drivers/lima/lima_tiling.c
+++ b/src/gallium/drivers/lima/lima_tiling.c
@@ -51,18 +51,18 @@ lima_store_tiled_image_bpp4(void *dst, const void *src,
                                uint32_t dst_stride,
                                uint32_t src_stride)
 {
-   for (int y = box->y; y < box->height; ++y) {
+   for (int y = box->y, src_y = 0; src_y < box->height; ++y, ++src_y) {
       int block_y = y & ~0x0f;
       int rem_y = y & 0x0F;
       int block_start_s = block_y * dst_stride;
-      int source_start = y * src_stride;
+      int source_start = src_y * src_stride;
 
-      for (int x = box->x; x < box->width; ++x) {
+      for (int x = box->x, src_x = 0; src_x < box->width; ++x, ++src_x) {
          int block_x_s = (x >> 4) * 256;
          int rem_x = x & 0x0F;
 
          int index = space_filler[rem_y][rem_x];
-         const uint32_t *source = src + source_start + 4 * x;
+         const uint32_t *source = src + source_start + 4 * src_x;
          uint32_t *dest = dst + block_start_s + 4 * (block_x_s + index);
 
          *dest = *source;
@@ -77,19 +77,19 @@ lima_store_tiled_image_generic(void *dst, const void *src,
                                uint32_t src_stride,
                                uint32_t bpp)
 {
-   for (int y = box->y; y < box->height; ++y) {
+   for (int y = box->y, src_y = 0; src_y < box->height; ++y, ++src_y) {
       int block_y = y & ~0x0f;
       int rem_y = y & 0x0F;
       int block_start_s = block_y * dst_stride;
-      int source_start = y * src_stride;
+      int source_start = src_y * src_stride;
 
-      for (int x = box->x; x < box->width; ++x) {
+      for (int x = box->x, src_x; src_x < box->width; ++x, ++src_x) {
          int block_x_s = (x >> 4) * 256;
          int rem_x = x & 0x0F;
 
          int index = space_filler[rem_y][rem_x];
          const uint8_t *src8 = src;
-         const uint8_t *source = &src8[source_start + bpp * x];
+         const uint8_t *source = &src8[source_start + bpp * src_x];
          uint8_t *dest = dst + block_start_s + bpp * (block_x_s + index);
 
          for (int b = 0; b < bpp; ++b)
@@ -104,18 +104,18 @@ lima_load_tiled_image_bpp4(void *dst, const void *src,
                               uint32_t dst_stride,
                               uint32_t src_stride)
 {
-   for (int y = box->y; y < box->height; ++y) {
+   for (int y = box->y, dest_y = 0; dest_y < box->height; ++y, ++dest_y) {
       int block_y = y & ~0x0f;
       int rem_y = y & 0x0F;
       int block_start_s = block_y * src_stride;
-      int dest_start = y * dst_stride;
+      int dest_start = dest_y * dst_stride;
 
-      for (int x = box->x; x < box->width; ++x) {
+      for (int x = box->x, dest_x = 0; dest_x < box->width; ++x, ++dest_x) {
          int block_x_s = (x >> 4) * 256;
          int rem_x = x & 0x0F;
 
          int index = space_filler[rem_y][rem_x];
-         uint32_t *dest = dst + dest_start + 4 * x;
+         uint32_t *dest = dst + dest_start + 4 * dest_x;
          const uint32_t *source = src + block_start_s + 4 * (block_x_s + index);
 
          *dest = *source;
@@ -130,19 +130,19 @@ lima_load_tiled_image_generic(void *dst, const void *src,
                               uint32_t src_stride,
                               uint32_t bpp)
 {
-   for (int y = box->y; y < box->height; ++y) {
+   for (int y = box->y, dest_y = 0; dest_y < box->height; ++y, ++dest_y) {
       int block_y = y & ~0x0f;
       int rem_y = y & 0x0F;
       int block_start_s = block_y * src_stride;
-      int dest_start = y * dst_stride;
+      int dest_start = dest_y * dst_stride;
 
-      for (int x = box->x; x < box->width; ++x) {
+      for (int x = box->x, dest_x = 0; dest_x < box->width; ++x, ++dest_x) {
          int block_x_s = (x >> 4) * 256;
          int rem_x = x & 0x0F;
 
          int index = space_filler[rem_y][rem_x];
          uint8_t *dst8 = dst;
-         uint8_t *dest = &dst8[dest_start + bpp * x];
+         uint8_t *dest = &dst8[dest_start + bpp * dest_x];
          const uint8_t *source = src + block_start_s + bpp * (block_x_s + index);
 
          for (int b = 0; b < bpp; ++b)
-- 
2.0.1

