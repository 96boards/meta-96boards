From cc6194fe86dac54d91ddbd70737042f6a19c178c Mon Sep 17 00:00:00 2001
From: Qiang Yu <yuq825@gmail.com>
Date: Wed, 15 Aug 2018 16:05:21 +0800
Subject: [PATCH 25/52] Revert "lima: initial implementation for no glClear
 draw"

This reverts commit 659d7a5332b5a2afade91cfbc17d2b0a965d84b2.
---
 src/gallium/drivers/lima/lima_context.h  |   7 +-
 src/gallium/drivers/lima/lima_draw.c     | 292 +++++++++----------------------
 src/gallium/drivers/lima/lima_resource.c |  15 --
 src/gallium/drivers/lima/lima_resource.h |  10 --
 4 files changed, 82 insertions(+), 242 deletions(-)

diff --git a/src/gallium/drivers/lima/lima_context.h b/src/gallium/drivers/lima/lima_context.h
index 3140135..62b7501 100644
--- a/src/gallium/drivers/lima/lima_context.h
+++ b/src/gallium/drivers/lima/lima_context.h
@@ -46,7 +46,6 @@ struct lima_context_clear {
    uint32_t color;
    uint32_t depth;
    uint32_t stencil;
-   bool dirty;
 };
 
 struct lima_depth_stencil_alpha_state {
@@ -209,13 +208,9 @@ struct lima_context {
    struct lima_bo *plb[LIMA_CTX_PLB_MAX_NUM];
    struct lima_bo *plb_gp_stream;
    struct hash_table *plb_pp_stream;
+   struct lima_ctx_plb_pp_stream *current_plb_pp_stream;
    uint32_t plb_index;
 
-   struct lima_bo *current_plb;
-   struct lima_bo *current_tile_heap;
-   struct lima_bo *current_pp_stream;
-   uint32_t *current_pp_stream_offset;
-
    struct lima_ctx_buff_state buffer_state[lima_ctx_buff_num];
 
    struct util_dynarray vs_cmd_array;
diff --git a/src/gallium/drivers/lima/lima_draw.c b/src/gallium/drivers/lima/lima_draw.c
index fe41276..f8d8607 100644
--- a/src/gallium/drivers/lima/lima_draw.c
+++ b/src/gallium/drivers/lima/lima_draw.c
@@ -31,7 +31,6 @@
 #include "util/u_inlines.h"
 #include "util/u_pack_color.h"
 #include "util/hash_table.h"
-#include "util/u_upload_mgr.h"
 
 #include "lima_context.h"
 #include "lima_screen.h"
@@ -119,7 +118,6 @@ lima_clear(struct pipe_context *pctx, unsigned buffers,
    if (buffers & PIPE_CLEAR_STENCIL)
       clear->stencil = stencil;
 
-   clear->dirty = true;
    ctx->dirty |= LIMA_CONTEXT_DIRTY_CLEAR;
 }
 
@@ -160,12 +158,15 @@ hilbert_coords(int n, int d, int *x, int *y)
    }
 }
 
-static struct lima_bo *
-lima_alloc_pp_stream(struct lima_context *ctx, uint32_t plb_va, unsigned offset[])
+static void
+lima_update_plb(struct lima_context *ctx, struct lima_ctx_plb_pp_stream *s)
 {
    struct lima_context_framebuffer *fb = &ctx->framebuffer;
    struct lima_screen *screen = lima_screen(ctx->base.screen);
 
+   if (s->bo)
+      return;
+
    /* carefully calculate each stream start address:
     * 1. overflow: each stream size may be different due to
     *    fb->tiled_w * fb->tiled_h can't be divided by num_pp,
@@ -175,21 +176,21 @@ lima_alloc_pp_stream(struct lima_context *ctx, uint32_t plb_va, unsigned offset[
    int i, num_pp = screen->num_pp;
    int delta = fb->tiled_w * fb->tiled_h / num_pp * 16 + 8;
    int remain = fb->tiled_w * fb->tiled_h % num_pp;
-   int off = 0;
+   int offset = 0;
 
    for (i = 0; i < num_pp; i++) {
-      offset[i] = off;
+      s->offset[i] = offset;
 
-      off += delta;
+      offset += delta;
       if (remain) {
-         off += 16;
+         offset += 16;
          remain--;
       }
-      off = align(off, 0x20);
+      offset = align(offset, 0x20);
    }
 
-   unsigned size = align(off, LIMA_PAGE_SIZE);
-   struct lima_bo *bo = lima_bo_create(screen, size, 0, true, true);
+   unsigned size = align(offset, LIMA_PAGE_SIZE);
+   s->bo = lima_bo_create(screen, size, 0, true, true);
 
    /* use hilbert_coords to generates 1D to 2D relationship.
     * 1D for pp stream index and 2D for plb block x/y on framebuffer.
@@ -204,7 +205,7 @@ lima_alloc_pp_stream(struct lima_context *ctx, uint32_t plb_va, unsigned offset[
    int si[4] = {0};
 
    for (i = 0; i < num_pp; i++)
-      stream[i] = bo->map + offset[i];
+      stream[i] = s->bo->map + s->offset[i];
 
    for (i = 0; i < count; i++) {
       int x, y;
@@ -213,11 +214,11 @@ lima_alloc_pp_stream(struct lima_context *ctx, uint32_t plb_va, unsigned offset[
          int pp = index % num_pp;
          int offset = ((y >> fb->shift_h) * fb->block_w +
                        (x >> fb->shift_w)) * LIMA_CTX_PLB_BLK_SIZE;
-         int va = plb_va + offset;
+         int plb_va = ctx->plb[s->key.plb_index]->va + offset;
 
          stream[pp][si[pp]++] = 0;
          stream[pp][si[pp]++] = 0xB8000000 | x | (y << 8);
-         stream[pp][si[pp]++] = 0xE0000002 | ((va >> 3) & ~0xE0000003);
+         stream[pp][si[pp]++] = 0xE0000002 | ((plb_va >> 3) & ~0xE0000003);
          stream[pp][si[pp]++] = 0xB0000000;
 
          index++;
@@ -230,10 +231,8 @@ lima_alloc_pp_stream(struct lima_context *ctx, uint32_t plb_va, unsigned offset[
 
       lima_dump_command_stream_print(
          stream[i], si[i] * 4, false, "pp plb stream %d at va %x\n",
-         i, bo->va + offset[i]);
+         i, s->bo->va + s->offset[i]);
    }
-
-   return bo;
 }
 
 enum lima_attrib_type {
@@ -366,15 +365,12 @@ lima_is_scissor_zero(struct lima_context *ctx)
 static void
 lima_pack_plbu_cmd(struct lima_context *ctx, const struct pipe_draw_info *info)
 {
-   int i = 0, max_n = 40 + 14;
+   int i = 0, max_n = 40;
    uint32_t *plbu_cmd = util_dynarray_enlarge(&ctx->plbu_cmd_array, max_n * 4);
 
    /* first draw need create a PLBU command header */
    if (!ctx->plbu_cmd_array.size) {
       struct lima_context_framebuffer *fb = &ctx->framebuffer;
-      struct lima_surface *fbs = lima_surface(fb->cbuf);
-      bool restore_state = !ctx->clear.dirty && fbs->gp_stream;
-      uint32_t state_va;
 
       plbu_cmd[i++] = 0x00000200;
       plbu_cmd[i++] = 0x1000010B; /* PRIMITIVE_SETUP */
@@ -388,23 +384,9 @@ lima_pack_plbu_cmd(struct lima_context *ctx, const struct pipe_draw_info *info)
       plbu_cmd[i++] = fb->block_w;
       plbu_cmd[i++] = 0x30000000; /* PLBU_BLOCK_STRIDE */
 
-      /* gp stream address, left to set when flush */
-      plbu_cmd[i++] = 0x00000000;
+      plbu_cmd[i++] = ctx->plb_gp_stream->va + ctx->plb_index * ctx->plb_gp_size;
       plbu_cmd[i++] = 0x28000000 | (fb->block_w * fb->block_h - 1); /* PLBU_ARRAY_ADDRESS */
 
-
-      if (restore_state) {
-         state_va = fbs->save_state->va;
-
-         plbu_cmd[i++] = state_va;
-         plbu_cmd[i++] = 0x90000103;
-         state_va += 4;
-
-         plbu_cmd[i++] = state_va;
-         plbu_cmd[i++] = 0x90000104;
-         state_va += 4;
-      }
-
       plbu_cmd[i++] = fui(ctx->viewport.x);
       plbu_cmd[i++] = 0x10000107; /* VIEWPORT_X */
 
@@ -416,28 +398,6 @@ lima_pack_plbu_cmd(struct lima_context *ctx, const struct pipe_draw_info *info)
 
       plbu_cmd[i++] = fui(ctx->viewport.height);
       plbu_cmd[i++] = 0x10000106; /* VIEWPORT_H */
-
-      if (restore_state) {
-         plbu_cmd[i++] = state_va;
-         plbu_cmd[i++] = 0x90000107;
-         state_va += 4;
-
-         plbu_cmd[i++] = state_va;
-         plbu_cmd[i++] = 0x90000108;
-         state_va += 4;
-
-         plbu_cmd[i++] = state_va;
-         plbu_cmd[i++] = 0x90000105;
-         state_va += 4;
-
-         plbu_cmd[i++] = state_va;
-         plbu_cmd[i++] = 0x90000106;
-         state_va += 4;
-
-         /* TODO: need investigate */
-         plbu_cmd[i++] = (0 << 30) | (fb->height - 1) << 15 | 0;
-         plbu_cmd[i++] = 0x70000000 | (fb->width - 1) << 13 | (0 >> 2);
-      }
    }
 
    /* If it's zero scissor, we skip adding all other commands */
@@ -959,6 +919,46 @@ lima_update_varying(struct lima_context *ctx, const struct pipe_draw_info *info)
 }
 
 static void
+lima_update_submit_bo(struct lima_context *ctx)
+{
+   lima_submit_add_bo(ctx->gp_submit, ctx->vs->bo, LIMA_SUBMIT_BO_READ);
+   lima_submit_add_bo(ctx->pp_submit, ctx->fs->bo, LIMA_SUBMIT_BO_READ);
+
+   if (!ctx->num_draws) {
+      struct lima_screen *screen = lima_screen(ctx->base.screen);
+      lima_submit_add_bo(ctx->gp_submit, ctx->plb_gp_stream, LIMA_SUBMIT_BO_READ);
+      lima_submit_add_bo(ctx->gp_submit, ctx->plb[ctx->plb_index], LIMA_SUBMIT_BO_WRITE);
+      lima_submit_add_bo(ctx->gp_submit, screen->gp_buffer, LIMA_SUBMIT_BO_READ);
+
+      lima_dump_command_stream_print(
+         ctx->plb_gp_stream->map + ctx->plb_index * ctx->plb_gp_size,
+         ctx->plb_gp_size, false, "gp plb stream at va %x\n",
+         ctx->plb_gp_stream->va + ctx->plb_index * ctx->plb_gp_size);
+
+      if (ctx->plb_pp_stream) {
+         struct lima_ctx_plb_pp_stream_key key = {
+            .plb_index = ctx->plb_index,
+            .tiled_w = ctx->framebuffer.tiled_w,
+            .tiled_h = ctx->framebuffer.tiled_h,
+         };
+
+         struct hash_entry *entry =
+            _mesa_hash_table_search(ctx->plb_pp_stream, &key);
+         struct lima_ctx_plb_pp_stream *s = entry->data;
+         lima_update_plb(ctx, s);
+         ctx->current_plb_pp_stream = s;
+
+         lima_submit_add_bo(ctx->pp_submit, s->bo, LIMA_SUBMIT_BO_READ);
+      }
+
+      struct lima_resource *res = lima_resource(ctx->framebuffer.cbuf->texture);
+      lima_submit_add_bo(ctx->pp_submit, res->bo, LIMA_SUBMIT_BO_WRITE);
+      lima_submit_add_bo(ctx->pp_submit, ctx->plb[ctx->plb_index], LIMA_SUBMIT_BO_READ);
+      lima_submit_add_bo(ctx->pp_submit, screen->pp_buffer, LIMA_SUBMIT_BO_READ);
+   }
+}
+
+static void
 lima_draw_vbo(struct pipe_context *pctx, const struct pipe_draw_info *info)
 {
    debug_checkpoint();
@@ -973,9 +973,6 @@ lima_draw_vbo(struct pipe_context *pctx, const struct pipe_draw_info *info)
    if (!lima_update_vs_state(ctx) || !lima_update_fs_state(ctx))
       return;
 
-   lima_submit_add_bo(ctx->gp_submit, ctx->vs->bo, LIMA_SUBMIT_BO_READ);
-   lima_submit_add_bo(ctx->pp_submit, ctx->fs->bo, LIMA_SUBMIT_BO_READ);
-
    lima_dump_command_stream_print(
       ctx->vs->bo->map, ctx->vs->shader_size, false,
       "add vs at va %x\n", ctx->vs->bo->va);
@@ -984,6 +981,8 @@ lima_draw_vbo(struct pipe_context *pctx, const struct pipe_draw_info *info)
       ctx->fs->bo->map, ctx->fs->shader_size, false,
       "add fs at va %x\n", ctx->fs->bo->va);
 
+   lima_update_submit_bo(ctx);
+
    lima_update_gp_attribute_info(ctx, info);
 
    if ((ctx->dirty & LIMA_CONTEXT_DIRTY_CONST_BUFF &&
@@ -1017,43 +1016,10 @@ lima_draw_vbo(struct pipe_context *pctx, const struct pipe_draw_info *info)
 }
 
 static void
-lima_finish_plbu_cmd(struct lima_context *ctx, bool save_state)
+lima_finish_plbu_cmd(struct lima_context *ctx)
 {
    int i = 0;
-   int n = save_state ? 16 : 2;
-   uint32_t *plbu_cmd = util_dynarray_enlarge(&ctx->plbu_cmd_array, n * 4);
-
-   if (save_state) {
-      struct lima_surface *fbs = lima_surface(ctx->framebuffer.cbuf);
-      uint32_t save_va = fbs->save_state->va;
-
-      plbu_cmd[i++] = save_va;
-      plbu_cmd[i++] = 0xa0000103; /* TILE HEAP START */
-      save_va += 4;
-
-      plbu_cmd[i++] = save_va;
-      plbu_cmd[i++] = 0xa0000104; /* TILE HEAP END */
-      save_va += 4;
-
-      plbu_cmd[i++] = save_va;
-      plbu_cmd[i++] = 0xa0000107;
-      save_va += 4;
-
-      plbu_cmd[i++] = save_va;
-      plbu_cmd[i++] = 0xa0000108;
-      save_va += 4;
-
-      plbu_cmd[i++] = save_va;
-      plbu_cmd[i++] = 0xa0000105;
-      save_va += 4;
-
-      plbu_cmd[i++] = save_va;
-      plbu_cmd[i++] = 0xa0000106;
-      save_va += 4;
-
-      plbu_cmd[i++] = 0x00000000;
-      plbu_cmd[i++] = 0xd0000000;
-   }
+   uint32_t *plbu_cmd = util_dynarray_enlarge(&ctx->plbu_cmd_array, 2 * 4);
 
    plbu_cmd[i++] = 0x00000000;
    plbu_cmd[i++] = 0x50000000; /* END */
@@ -1115,106 +1081,9 @@ lima_pack_pp_frame_reg(struct lima_context *ctx, uint32_t *frame_reg,
 }
 
 static void
-lima_select_plb(struct lima_context *ctx, bool save_state)
+_lima_flush(struct lima_context *ctx)
 {
-   struct lima_screen *screen = lima_screen(ctx->base.screen);
-   struct lima_context_framebuffer *fb = &ctx->framebuffer;
-   struct lima_surface *fbs = lima_surface(fb->cbuf);
-   int num_plb = fb->block_w * fb->block_h;
-   struct lima_bo *gp_stream;
-   uint32_t gp_stream_offset, gp_stream_size = num_plb * 4;
-
-   if (save_state || fbs->gp_stream) {
-      if (!fbs->plb) {
-         unsigned size = num_plb * LIMA_CTX_PLB_BLK_SIZE;
-         fbs->plb = lima_bo_create(screen, size, 0, false, true);
-      }
-      ctx->current_plb = fbs->plb;
-
-      if (!fbs->gp_stream || ctx->clear.dirty) {
-         uint32_t *stream = NULL;
-         u_upload_alloc(ctx->uploader, 0, gp_stream_size, 0x40,
-                        &fbs->gp_stream_offset, &fbs->gp_stream,
-                        (void **)&stream);
-
-         for (int i = 0; i < num_plb; i++)
-            stream[i] = fbs->plb->va + LIMA_CTX_PLB_BLK_SIZE * i;
-      }
-      gp_stream = lima_resource(fbs->gp_stream)->bo;
-      gp_stream_offset = fbs->gp_stream_offset;
-
-      if (ctx->plb_pp_stream && !fbs->pp_stream)
-         fbs->pp_stream = lima_alloc_pp_stream(
-            ctx, fbs->plb->va, fbs->pp_stream_offset);
-      ctx->current_pp_stream = fbs->pp_stream;
-      ctx->current_pp_stream_offset = fbs->pp_stream_offset;
-
-      if (!fbs->tile_heap)
-         fbs->tile_heap = lima_bo_create(screen, gp_buffer_size, 0, false, true);
-      ctx->current_tile_heap = fbs->tile_heap;
-
-      if (!fbs->save_state) {
-         unsigned size = 6 * 4;
-         fbs->save_state = lima_bo_create(screen, size, 0, false, true);
-      }
-      lima_submit_add_bo(ctx->gp_submit, fbs->save_state, LIMA_SUBMIT_BO_READ);
-   }
-   else {
-      ctx->current_plb = ctx->plb[ctx->plb_index];
-      gp_stream = ctx->plb_gp_stream;
-      gp_stream_offset = ctx->plb_index * ctx->plb_gp_size;
-      ctx->current_tile_heap = screen->gp_buffer;
-
-      if (ctx->plb_pp_stream) {
-         struct lima_ctx_plb_pp_stream_key key = {
-            .plb_index = ctx->plb_index,
-            .tiled_w = ctx->framebuffer.tiled_w,
-            .tiled_h = ctx->framebuffer.tiled_h,
-         };
-
-         struct hash_entry *entry =
-            _mesa_hash_table_search(ctx->plb_pp_stream, &key);
-         struct lima_ctx_plb_pp_stream *s = entry->data;
-
-         if (!s->bo)
-            s->bo = lima_alloc_pp_stream(ctx, ctx->current_plb->va, s->offset);
-         ctx->current_pp_stream = s->bo;
-         ctx->current_pp_stream_offset = s->offset;
-      }
-      else {
-         ctx->current_pp_stream = NULL;
-         ctx->current_pp_stream_offset = NULL;
-      }
-
-      ctx->plb_index = (ctx->plb_index + 1) % lima_ctx_num_plb;
-   }
-
-   lima_submit_add_bo(ctx->gp_submit, ctx->current_plb, LIMA_SUBMIT_BO_WRITE);
-   lima_submit_add_bo(ctx->gp_submit, gp_stream, LIMA_SUBMIT_BO_READ);
-   lima_submit_add_bo(ctx->gp_submit, ctx->current_tile_heap, LIMA_SUBMIT_BO_READ);
-
-   lima_dump_command_stream_print(
-      gp_stream->map + gp_stream_offset, gp_stream_size, false,
-      "gp plb stream at va %x\n", gp_stream->va + gp_stream_offset);
-
-   struct lima_resource *res = lima_resource(ctx->framebuffer.cbuf->texture);
-   lima_submit_add_bo(ctx->pp_submit, res->bo, LIMA_SUBMIT_BO_WRITE);
-   lima_submit_add_bo(ctx->pp_submit, ctx->current_plb, LIMA_SUBMIT_BO_READ);
-   lima_submit_add_bo(ctx->pp_submit, screen->pp_buffer, LIMA_SUBMIT_BO_READ);
-   if (ctx->current_pp_stream)
-      lima_submit_add_bo(ctx->pp_submit, ctx->current_pp_stream, LIMA_SUBMIT_BO_READ);
-
-   /* set real gp stream address */
-   uint32_t *plbu_array = util_dynarray_begin(&ctx->plbu_cmd_array);
-   plbu_array[8] = gp_stream->va + gp_stream_offset;
-}
-
-static void
-_lima_flush(struct lima_context *ctx, bool save_state)
-{
-   lima_select_plb(ctx, save_state);
-
-   lima_finish_plbu_cmd(ctx, save_state);
+   lima_finish_plbu_cmd(ctx);
 
    int vs_cmd_size = ctx->vs_cmd_array.size;
    int plbu_cmd_size = ctx->plbu_cmd_array.size;
@@ -1240,8 +1109,8 @@ _lima_flush(struct lima_context *ctx, bool save_state)
    gp_frame_reg->vs_cmd_end = vs_cmd_va + vs_cmd_size;
    gp_frame_reg->plbu_cmd_start = plbu_cmd_va;
    gp_frame_reg->plbu_cmd_end = plbu_cmd_va + plbu_cmd_size;
-   gp_frame_reg->tile_heap_start = ctx->current_tile_heap->va;
-   gp_frame_reg->tile_heap_end = ctx->current_tile_heap->va + gp_buffer_size;
+   gp_frame_reg->tile_heap_start = screen->gp_buffer->va + gp_tile_heap_offset;
+   gp_frame_reg->tile_heap_end = screen->gp_buffer->va + gp_buffer_size;
 
    lima_dump_command_stream_print(
       vs_cmd, vs_cmd_size, false, "flush vs cmd at va %x\n", vs_cmd_va);
@@ -1261,6 +1130,12 @@ _lima_flush(struct lima_context *ctx, bool save_state)
          lima_dump_command_stream_print(
             pos, 4 * 4 * 16, true, "gl_pos dump at va %x\n",
             lima_ctx_buff_va(ctx, lima_ctx_buff_sh_gl_pos));
+
+         lima_bo_update(ctx->plb[ctx->plb_index], true, false);
+         uint32_t *plb = ctx->plb[ctx->plb_index]->map;
+         lima_dump_command_stream_print(
+            plb, LIMA_CTX_PLB_BLK_SIZE, false, "plb dump at va %x\n",
+            ctx->plb[ctx->plb_index]->va);
       }
       else
          fprintf(stderr, "gp submit wait error\n");
@@ -1271,15 +1146,17 @@ _lima_flush(struct lima_context *ctx, bool save_state)
       lima_pack_pp_frame_reg(ctx, pp_frame.frame, pp_frame.wb);
       pp_frame.num_pp = screen->num_pp;
 
+      struct lima_ctx_plb_pp_stream *s = ctx->current_plb_pp_stream;
       for (int i = 0; i < screen->num_pp; i++)
-         pp_frame.plbu_array_address[i] =
-            ctx->current_pp_stream->va + ctx->current_pp_stream_offset[i];
+         pp_frame.plbu_array_address[i] = s->bo->va + s->offset[i];
 
       lima_dump_command_stream_print(
          &pp_frame, sizeof(pp_frame), false, "add pp frame\n");
 
       if (!lima_submit_start(ctx->pp_submit, &pp_frame, sizeof(pp_frame)))
          fprintf(stderr, "pp submit error\n");
+
+      ctx->current_plb_pp_stream = NULL;
    }
    else {
       struct drm_lima_m450_pp_frame pp_frame = {0};
@@ -1288,7 +1165,7 @@ _lima_flush(struct lima_context *ctx, bool save_state)
       pp_frame.use_dlbu = true;
 
       struct lima_context_framebuffer *fb = &ctx->framebuffer;
-      pp_frame.dlbu_regs[0] = ctx->current_plb->va;
+      pp_frame.dlbu_regs[0] = ctx->plb[ctx->plb_index]->va;
       pp_frame.dlbu_regs[1] = ((fb->tiled_h - 1) << 16) | (fb->tiled_w - 1);
       unsigned s = util_logbase2(LIMA_CTX_PLB_BLK_SIZE) - 7;
       pp_frame.dlbu_regs[2] = (s << 28) | (fb->shift_h << 16) | fb->shift_w;
@@ -1302,7 +1179,7 @@ _lima_flush(struct lima_context *ctx, bool save_state)
    }
 
    ctx->num_draws = 0;
-   ctx->clear.dirty = false;
+   ctx->plb_index = (ctx->plb_index + 1) % lima_ctx_num_plb;
 }
 
 void
@@ -1313,7 +1190,7 @@ lima_flush(struct lima_context *ctx)
       return;
    }
 
-   _lima_flush(ctx, true);
+   _lima_flush(ctx);
 }
 
 static void
@@ -1325,23 +1202,16 @@ lima_pipe_flush(struct pipe_context *pctx, struct pipe_fence_handle **fence,
    struct lima_context *ctx = lima_context(pctx);
    if (!ctx->num_draws) {
       debug_printf("%s: do nothing\n", __FUNCTION__);
-      goto out;
+      return;
    }
 
    if ((flags & PIPE_FLUSH_FENCE_FD) && fence)
       lima_submit_need_sync_fd(ctx->pp_submit);
 
-   _lima_flush(ctx, !(flags & PIPE_FLUSH_END_OF_FRAME));
+   _lima_flush(ctx);
 
    if (fence)
       *fence = lima_fence_create(ctx, lima_submit_get_sync_fd(ctx->pp_submit));
-
-out:
-   if (flags & PIPE_FLUSH_END_OF_FRAME) {
-      struct lima_surface *fbs = lima_surface(ctx->framebuffer.cbuf);
-      if (fbs)
-         pipe_resource_reference(&fbs->gp_stream, NULL);
-   }
 }
 
 void
diff --git a/src/gallium/drivers/lima/lima_resource.c b/src/gallium/drivers/lima/lima_resource.c
index c553472..bcdc20a 100644
--- a/src/gallium/drivers/lima/lima_resource.c
+++ b/src/gallium/drivers/lima/lima_resource.c
@@ -426,21 +426,6 @@ lima_surface_destroy(struct pipe_context *pctx, struct pipe_surface *psurf)
       }
    }
 
-   if (surf->gp_stream)
-      pipe_resource_reference(&surf->gp_stream, NULL);
-
-   if (surf->save_state)
-      lima_bo_free(surf->save_state);
-
-   if (surf->tile_heap)
-      lima_bo_free(surf->tile_heap);
-
-   if (surf->plb)
-      lima_bo_free(surf->plb);
-
-   if (surf->pp_stream)
-      lima_bo_free(surf->pp_stream);
-
    pipe_resource_reference(&psurf->texture, NULL);
    FREE(surf);
 }
diff --git a/src/gallium/drivers/lima/lima_resource.h b/src/gallium/drivers/lima/lima_resource.h
index acb20a0..32202b4 100644
--- a/src/gallium/drivers/lima/lima_resource.h
+++ b/src/gallium/drivers/lima/lima_resource.h
@@ -42,16 +42,6 @@ struct lima_resource {
 struct lima_surface {
    struct pipe_surface base;
    int tiled_w, tiled_h;
-
-   struct pipe_resource *gp_stream;
-   unsigned gp_stream_offset;
-
-   struct lima_bo *save_state;
-   struct lima_bo *tile_heap;
-   struct lima_bo *plb;
-
-   struct lima_bo *pp_stream;
-   unsigned pp_stream_offset[4];
 };
 
 struct lima_transfer {
-- 
2.0.1

