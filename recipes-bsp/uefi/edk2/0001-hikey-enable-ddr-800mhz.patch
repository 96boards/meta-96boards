From dd7dfe533f8b9053036eb3d856eac08b214e4994 Mon Sep 17 00:00:00 2001
From: Haojian Zhuang <haojian.zhuang@linaro.org>
Date: Tue, 17 Mar 2015 19:49:53 +0800
Subject: [PATCH 1/2] hikey: enable ddr 800mhz

Make DDR working in 800MHz by default.

Signed-off-by: Haojian Zhuang <haojian.zhuang@linaro.org>
---
 plat/hikey/bl1_plat_setup.c       |  19 ++
 plat/hikey/include/platform_def.h |   1 +
 plat/hikey/pll.c                  | 358 ++++++++++++++++++++++++++++++++------
 3 files changed, 325 insertions(+), 53 deletions(-)

diff --git a/plat/hikey/bl1_plat_setup.c b/plat/hikey/bl1_plat_setup.c
index 6ccac43..6b9bffe 100644
--- a/plat/hikey/bl1_plat_setup.c
+++ b/plat/hikey/bl1_plat_setup.c
@@ -216,11 +216,30 @@ static void hikey_hi6553_init(void)
 	hi6553_write_8(BUCK2_REG1, 0x4f);
 	hi6553_write_8(BUCK2_REG5, 0x99);
 	hi6553_write_8(BUCK2_REG6, 0x45);
+	isb();
+	dsb();
+	mdelay(1);
+	hi6553_write_8(VSET_BUCK2_ADJ, 0x22);
+	isb();
+	dsb();
+	mdelay(1);
 
 	/* configure BUCK3 */
 	hi6553_write_8(BUCK3_REG3, 0x02);
 	hi6553_write_8(BUCK3_REG5, 0x99);
 	hi6553_write_8(BUCK3_REG6, 0x41);
+	isb();
+	dsb();
+#ifdef DDR800
+	hi6553_write_8(VSET_BUCK3_ADJ, 0x02);
+	//hi6553_write_8(VSET_BUCK3_ADJ, 0x03);
+#else
+	//hi6553_write_8(VSET_BUCK3_ADJ, 0x02);
+	hi6553_write_8(VSET_BUCK3_ADJ, 0x00);
+#endif
+	isb();
+	dsb();
+	mdelay(1);
 
 	/* configure BUCK4 */
 	hi6553_write_8(BUCK4_REG2, 0x9a);
diff --git a/plat/hikey/include/platform_def.h b/plat/hikey/include/platform_def.h
index e8f16b7..59c38ea 100644
--- a/plat/hikey/include/platform_def.h
+++ b/plat/hikey/include/platform_def.h
@@ -101,6 +101,7 @@
 #define BL1_XG2RAM0_OFFSET		0x1000
 
 #define DDR_BASE			0x00000000
+#define DDR800
 
 #define MMC_DESC_BASE			(DDR_BASE + 0x0080000)
 #define MMC_DESC_SIZE			0x00020000
diff --git a/plat/hikey/pll.c b/plat/hikey/pll.c
index 20f7a5a..540133c 100644
--- a/plat/hikey/pll.c
+++ b/plat/hikey/pll.c
@@ -39,8 +39,6 @@
 #include <platform_def.h>
 #include <sp804_timer.h>
 
-//#define DDR800
-
 static void init_pll(void)
 {
 	unsigned int data;
@@ -49,21 +47,26 @@ static void init_pll(void)
 	data = mmio_read_32((0xf7032000 + 0x000));
 	data |= 0x1;
 	mmio_write_32((0xf7032000 + 0x000), data);
+	isb();
 	dsb();
 	do {
 		data = mmio_read_32((0xf7032000 + 0x000));
 	} while (!(data & (1 << 28)));
-
+	isb();
+	dsb();
 
 	data = mmio_read_32((0xf7800000 + 0x000));
 	data &= ~0x007;
 	data |= 0x004;
 	mmio_write_32((0xf7800000 + 0x000), data);
+	isb();
 	dsb();
 	do {
 		data = mmio_read_32((0xf7800000 + 0x014));
 		data &= 0x007;
 	} while (data != 0x004);
+	isb();
+	dsb();
 }
 
 static void init_freq(void)
@@ -72,105 +75,145 @@ static void init_freq(void)
 	unsigned int cpuext_cfg, ddr_cfg;
 
 	mmio_write_32((0xf7032000 + 0x374), 0x4a);
+	isb();
+	dsb();
 	mmio_write_32((0xf7032000 + 0x368), 0xda);
+	isb();
+	dsb();
 	mmio_write_32((0xf7032000 + 0x36c), 0x01);
+	isb();
+	dsb();
 	mmio_write_32((0xf7032000 + 0x370), 0x01);
+	isb();
+	dsb();
 	mmio_write_32((0xf7032000 + 0x360), 0x60);
+	isb();
+	dsb();
 	mmio_write_32((0xf7032000 + 0x364), 0x60);
+	isb();
+	dsb();
 
 	mmio_write_32((0xf7032000 + 0x114), 0x1000);
+	isb();
+	dsb();
 
 	data = mmio_read_32((0xf7032000 + 0x110));
 	data |= (3 << 12);
 	mmio_write_32((0xf7032000 + 0x110), data);
+	isb();
+	dsb();
 
 	data = mmio_read_32((0xf7032000 + 0x110));
 	data |= (1 << 4);
 	mmio_write_32((0xf7032000 + 0x110), data);
-
+	isb();
+	dsb();
 
 	data = mmio_read_32((0xf7032000 + 0x110));
 	data &= ~0x7;
 	data |= 0x5;
 	mmio_write_32((0xf7032000 + 0x110), data);
+	isb();
 	dsb();
-	mdelay(10);
-
 
 	do {
 		data = mmio_read_32((0xf6504000 + 0x008));
 		data &= (3 << 20);
 	} while (data != (3 << 20));
+	isb();
 	dsb();
-	mdelay(10);
-
 
 	data = mmio_read_32((0xf6504000 + 0x054));
 	data &= ~((1 << 0) | (1 << 11));
 	mmio_write_32((0xf6504000 + 0x054), data);
-	mdelay(10);
+	isb();
+	dsb();
 
 	data = mmio_read_32((0xf7032000 + 0x104));
 	data &= ~(3 << 8);
 	data |= (1 << 8);
 	mmio_write_32((0xf7032000 + 0x104), data);
+	isb();
+	dsb();
 
 	data = mmio_read_32((0xf7032000 + 0x100));
 	data |= (1 << 0);
 	mmio_write_32((0xf7032000 + 0x100), data);
+	isb();
 	dsb();
 
 	do {
 		data = mmio_read_32((0xf7032000 + 0x100));
 		data &= (1 << 2);
 	} while (data != (1 << 2));
+	isb();
+	dsb();
 
 	data = mmio_read_32((0xf6504000 + 0x06c));
 	data &= ~0xffff;
 	data |= 0x56;
 	mmio_write_32((0xf6504000 + 0x06c), data);
+	isb();
+	dsb();
 
 	data = mmio_read_32((0xf6504000 + 0x06c));
 	data &= ~(0xffffff << 8);
 	data |= 0xc7a << 8;
 	mmio_write_32((0xf6504000 + 0x06c), data);
+	isb();
+	dsb();
 
 	data = mmio_read_32((0xf6504000 + 0x058));
 	data &= ((1 << 13) - 1);
 	data |= 0xccb;
 	mmio_write_32((0xf6504000 + 0x058), data);
+	isb();
+	dsb();
 
 	mmio_write_32((0xf6504000 + 0x060), 0x1fff);
 	mmio_write_32((0xf6504000 + 0x064), 0x1ffffff);
 	mmio_write_32((0xf6504000 + 0x068), 0x7fffffff);
 	mmio_write_32((0xf6504000 + 0x05c), 0x1);
+	isb();
+	dsb();
 
 	data = mmio_read_32((0xf6504000 + 0x054));
 	data &= ~(0xf << 12);
 	data |= 1 << 12;
 	mmio_write_32((0xf6504000 + 0x054), data);
+	isb();
 	dsb();
 
 
 	data = mmio_read_32((0xf7032000 + 0x000));
 	data &= ~(1 << 0);
 	mmio_write_32((0xf7032000 + 0x000), data);
+	isb();
+	dsb();
 
 	mmio_write_32((0xf7032000 + 0x004), 0x5110207d);
 	mmio_write_32((0xf7032000 + 0x134), 0x10000005);
+	isb();
+	dsb();
 	data = mmio_read_32((0xf7032000 + 0x134));
 
 
 	data = mmio_read_32((0xf7032000 + 0x000));
 	data |= (1 << 0);
 	mmio_write_32((0xf7032000 + 0x000), data);
+	isb();
+	dsb();
 
 	mmio_write_32((0xf7032000 + 0x368), 0x100da);
+	isb();
+	dsb();
 	data = mmio_read_32((0xf7032000 + 0x378));
 	data &= ~((1 << 7) - 1);
 	data |= 0x6b;
 	mmio_write_32((0xf7032000 + 0x378), data);
+	isb();
 	dsb();
+	mdelay(1);
 	do {
 		data = mmio_read_32((0xf7032000 + 0x378));
 		tmp = data & 0x7f;
@@ -179,6 +222,8 @@ static void init_freq(void)
 			continue;
 		data = mmio_read_32((0xf7032000 + 0x37c));
 	} while (!(data & 1));
+	isb();
+	dsb();
 
 	data = mmio_read_32((0xf7032000 + 0x104));
 	data &= ~((3 << 0) |
@@ -187,7 +232,9 @@ static void init_freq(void)
 	ddr_cfg = 1;
 	data |= cpuext_cfg | (ddr_cfg << 8);
 	mmio_write_32((0xf7032000 + 0x104), data);
+	isb();
 	dsb();
+	mdelay(1);
 
 	do {
 		data = mmio_read_32((0xf7032000 + 0x104));
@@ -200,26 +247,33 @@ static void init_freq(void)
 		data = mmio_read_32((0xf7032000 + 0x000));
 		data &= 1 << 28;
 	} while (!data);
+	isb();
+	dsb();
 
 	data = mmio_read_32((0xf7032000 + 0x100));
 	data &= ~(1 << 0);
 	mmio_write_32((0xf7032000 + 0x100), data);
+	isb();
 	dsb();
 	do {
 		data = mmio_read_32((0xf7032000 + 0x100));
 		data &= (1 << 1);
 	} while (data != (1 << 1));
-	mdelay(1000);
+	isb();
+	dsb();
 
 	data = mmio_read_32((0xf6504000 + 0x054));
 	data &= ~(1 << 28);
 	mmio_write_32((0xf6504000 + 0x054), data);
+	isb();
 	dsb();
 
 	data = mmio_read_32((0xf7032000 + 0x110));
 	data &= ~((1 << 4) |
 			(3 << 12));
 	mmio_write_32((0xf7032000 + 0x110), data);
+	isb();
+	dsb();
 }
 
 static int cat_533mhz_800mhz(void)
@@ -230,8 +284,10 @@ static int cat_533mhz_800mhz(void)
 
 	data = mmio_read_32((0xf712c000 + 0x1c8));
 	data &= 0xfffff0f0;
-	data |= 0x100f01;
+	data |= 0x100f0f;
 	mmio_write_32((0xf712c000 + 0x1c8), data);
+	isb();
+	dsb();
 
 	for (i = 0; i < 0x20; i++) {
 		mmio_write_32((0xf712c000 + 0x1d4), 0xc0000);
@@ -241,32 +297,38 @@ static int cat_533mhz_800mhz(void)
 		mmio_write_32((0xf712c000 + 0x148), data);
 		mmio_write_32((0xf712c000 + 0x14c), data);
 		mmio_write_32((0xf712c000 + 0x150), data);
-
+		isb();
+		dsb();
 
 		data = mmio_read_32((0xf712c000 + 0x070));
 		data |= 0x80000;
 		mmio_write_32((0xf712c000 + 0x070), data);
+		isb();
+		dsb();
 		data = mmio_read_32((0xf712c000 + 0x070));
 		data &= 0xfff7ffff;
 		mmio_write_32((0xf712c000 + 0x070), data);
-
+		isb();
+		dsb();
 
 		mmio_write_32((0xf712c000 + 0x004), 0x8000);
+		isb();
 		dsb();
-		mdelay(1);
 		mmio_write_32((0xf712c000 + 0x004), 0x0);
+		isb();
 		dsb();
-		mdelay(1);
 		mmio_write_32((0xf712c000 + 0x004), 0x801);
+		isb();
 		dsb();
-		mdelay(1);
 		do {
 			data = mmio_read_32((0xf712c000 + 0x004));
 		} while (data & 1);
+		isb();
+		dsb();
 
 		data = mmio_read_32((0xf712c000 + 0x008));
 		if (!(data & 0x400)) {
-			mdelay(10);
+			mdelay(1);
 			return 0;
 		}
 		tf_printf("WARN:  " "lpddr3 cat fail\n");
@@ -286,6 +348,8 @@ static int cat_533mhz_800mhz(void)
 					return -22;
 				}
 				mmio_write_32((0xf712c000 + 0x008), 0x400);
+				isb();
+				dsb();
 			} else {
 				tf_printf("WARN:  " "lpddr3 cat other error1\n");
 				return -22;
@@ -304,52 +368,58 @@ static void ddrx_rdet(void)
 
 	data = mmio_read_32((0xf712c000 + 0x0d0));
 	data &= 0xf800ffff;
-	data |= 0x8a0000;
+	data |= 0x8f0000;
 	mmio_write_32((0xf712c000 + 0x0d0), data);
+	isb();
 	dsb();
-	mdelay(1);
 
 	data = mmio_read_32((0xf712c000 + 0x0dc));
 	data &= 0xfffffff0;
-	data |= 0x4;
+	data |= 0xf;
 	mmio_write_32((0xf712c000 + 0x0dc), data);
+	isb();
 	dsb();
-	mdelay(1);
 
 
 	data = mmio_read_32((0xf712c000 + 0x070));
 	data |= 0x80000;
 	mmio_write_32((0xf712c000 + 0x070), data);
+	isb();
 	dsb();
-	mdelay(10);
 	data = mmio_read_32((0xf712c000 + 0x070));
 	data &= 0xfff7ffff;
 	mmio_write_32((0xf712c000 + 0x070), data);
+	isb();
 	dsb();
-	mdelay(10);
 
 	mmio_write_32((0xf712c000 + 0x004), 0x8000);
+	isb();
 	dsb();
-	mdelay(10);
+	mdelay(1);
 	mmio_write_32((0xf712c000 + 0x004), 0);
+	isb();
 	dsb();
-	mdelay(10);
 
 	data = mmio_read_32((0xf712c000 + 0x0d0));
 	data &= ~0xf0000000;
 	data |= 0x80000000;
 	mmio_write_32((0xf712c000 + 0x0d0), data);
+	isb();
+	dsb();
 
 	mmio_write_32((0xf712c000 + 0x004), 0x101);
+	isb();
 	dsb();
 	do {
 		data = mmio_read_32((0xf712c000 + 0x004));
 	} while (!(data & 1));
+	isb();
+	dsb();
 	data = mmio_read_32((0xf712c000 + 0x008));
 	if (data & 0x100)
 		tf_printf("WARN:    " "rdet lbs fail\n");
 
-	mdelay(10);
+	mdelay(1);
 	bdl[0] = mmio_read_32((0xf712c000 + 0x22c)) & 0x7f;
 	bdl[1] = mmio_read_32((0xf712c000 + 0x2ac)) & 0x7f;
 	bdl[2] = mmio_read_32((0xf712c000 + 0x32c)) & 0x7f;
@@ -359,52 +429,73 @@ static void ddrx_rdet(void)
 		data &= ~0x7f;
 		data |= bdl[0];
 		mmio_write_32((0xf712c000 + 0x22c), data);
+		isb();
+		dsb();
 		data = mmio_read_32((0xf712c000 + 0x2ac));
 		data &= ~0x7f;
 		data |= bdl[1];
 		mmio_write_32((0xf712c000 + 0x2ac), data);
+		isb();
+		dsb();
 		data = mmio_read_32((0xf712c000 + 0x32c));
 		data &= ~0x7f;
 		data |= bdl[2];
 		mmio_write_32((0xf712c000 + 0x32c), data);
+		isb();
+		dsb();
 		data = mmio_read_32((0xf712c000 + 0x3ac));
 		data &= ~0x7f;
 		data |= bdl[3];
 		mmio_write_32((0xf712c000 + 0x3ac), data);
-
+		isb();
+		dsb();
 
 		data = mmio_read_32((0xf712c000 + 0x070));
 		data |= 0x80000;
 		mmio_write_32((0xf712c000 + 0x070), data);
+		isb();
 		dsb();
 		data = mmio_read_32((0xf712c000 + 0x070));
 		data &= 0xfff7ffff;
 		mmio_write_32((0xf712c000 + 0x070), data);
+		isb();
+		dsb();
 
 		mmio_write_32((0xf712c000 + 0x004), 0x8000);
+		isb();
 		dsb();
-		mdelay(1);
 		mmio_write_32((0xf712c000 + 0x004), 0);
+		isb();
+		dsb();
 
 		data = mmio_read_32((0xf712c000 + 0x0d0));
 		data &= ~0xf0000000;
 		data |= 0x40000000;
 		mmio_write_32((0xf712c000 + 0x0d0), data);
+		isb();
 		dsb();
 		mmio_write_32((0xf712c000 + 0x004), 0x101);
+		isb();
 		dsb();
 		do {
 			data = mmio_read_32((0xf712c000 + 0x004));
 		} while (data & 1);
+		isb();
+		dsb();
 
 		data = mmio_read_32((0xf712c000 + 0x008));
 		rdet = data & 0x100;
 		if (rdet) {
-			tf_printf("INFO:    " "rdet ds fail\n");
-			mmio_write_32((0xf712c000 + 0x008), 0x100);
+			tf_printf("INFO:    " "rdet ds fail, data:0x%x\n", data);
+			do {
+				mmio_write_32((0xf712c000 + 0x008), 0x100);
+				isb();
+				dsb();
+				data = mmio_read_32(0xf712c000 + 0x008);
+			} while (data == 0x100);
 		}
+		isb();
 		dsb();
-		mdelay(10);
 		bdl[0]++;
 		bdl[1]++;
 		bdl[2]++;
@@ -415,17 +506,22 @@ static void ddrx_rdet(void)
 	data &= ~0xf0000000;
 	data |= 0x30000000;
 	mmio_write_32((0xf712c000 + 0x0d0), data);
+	isb();
+	dsb();
 
 	mmio_write_32((0xf712c000 + 0x004), 0x101);
+	isb();
 	dsb();
 	do {
 		data = mmio_read_32((0xf712c000 + 0x004));
 	} while (data & 1);
+	isb();
+	dsb();
 	data = mmio_read_32((0xf712c000 + 0x008));
 	if (data & 0x100)
 		tf_printf("INFO:    " "rdet rbs av fail\n");
+	isb();
 	dsb();
-	mdelay(10);
 }
 
 static void ddrx_wdet(void)
@@ -435,31 +531,47 @@ static void ddrx_wdet(void)
 
 	data = mmio_read_32((0xf712c000 + 0x0d0));
 	data &= ~0xf;
-	data |= 0xa;
+	data |= 0xf;
 	mmio_write_32((0xf712c000 + 0x0d0), data);
+	isb();
+	dsb();
 
 	data = mmio_read_32((0xf712c000 + 0x070));
 	data |= 0x80000;
 	mmio_write_32((0xf712c000 + 0x070), data);
+	isb();
+	dsb();
 	data = mmio_read_32((0xf712c000 + 0x070));
 	data &= ~0x80000;
 	mmio_write_32((0xf712c000 + 0x070), data);
+	isb();
+	dsb();
 
 	mmio_write_32((0xf712c000 + 0x004), 0x8000);
+	isb();
+	dsb();
 	mmio_write_32((0xf712c000 + 0x004), 0);
+	isb();
+	dsb();
 	data = mmio_read_32((0xf712c000 + 0x0d0));
 	data &= ~0xf000;
 	data |= 0x8000;
 	mmio_write_32((0xf712c000 + 0x0d0), data);
+	isb();
+	dsb();
 	mmio_write_32((0xf712c000 + 0x004), 0x201);
+	isb();
 	dsb();
 	do {
 		data = mmio_read_32((0xf712c000 + 0x004));
 	} while (data & 1);
+	isb();
+	dsb();
 	data = mmio_read_32((0xf712c000 + 0x008));
 	if (data & 0x200)
 		tf_printf("INFO:    " "wdet lbs fail\n");
-	mdelay(10);
+	isb();
+	dsb();
 
 	dq[0] = mmio_read_32((0xf712c000 + 0x234)) & 0x1f00;
 	dq[1] = mmio_read_32((0xf712c000 + 0x2b4)) & 0x1f00;
@@ -471,24 +583,40 @@ static void ddrx_wdet(void)
 		mmio_write_32((0xf712c000 + 0x2b4), dq[1]);
 		mmio_write_32((0xf712c000 + 0x334), dq[2]);
 		mmio_write_32((0xf712c000 + 0x3b4), dq[3]);
+		isb();
+		dsb();
 
 		data = mmio_read_32((0xf712c000 + 0x070));
 		data |= 0x80000;
 		mmio_write_32((0xf712c000 + 0x070), data);
+		isb();
+		dsb();
 		data = mmio_read_32((0xf712c000 + 0x070));
 		data &= ~0x80000;
 		mmio_write_32((0xf712c000 + 0x070), data);
+		isb();
+		dsb();
 		mmio_write_32((0xf712c000 + 0x004), 0x8000);
+		isb();
+		dsb();
 		mmio_write_32((0xf712c000 + 0x004), 0);
+		isb();
+		dsb();
 
 		data = mmio_read_32((0xf712c000 + 0x0d0));
 		data &= ~0xf000;
 		data |= 0x4000;
 		mmio_write_32((0xf712c000 + 0x0d0), data);
+		isb();
+		dsb();
 		mmio_write_32((0xf712c000 + 0x004), 0x201);
+		isb();
+		dsb();
 		do {
 			data = mmio_read_32((0xf712c000 + 0x004));
 		} while (data & 1);
+		isb();
+		dsb();
 
 		data = mmio_read_32((0xf712c000 + 0x008));
 		wdet = data & 0x200;
@@ -496,7 +624,8 @@ static void ddrx_wdet(void)
 			tf_printf("INFO:    " "wdet ds fail\n");
 			mmio_write_32((0xf712c000 + 0x008), 0x200);
 		}
-		mdelay(10);
+		isb();
+		dsb();
 
 		for (i = 0; i < 4; i++) {
 			data = mmio_read_32((0xf712c000 + 0x210 + i * 0x80));
@@ -527,14 +656,21 @@ static void ddrx_wdet(void)
 	data &= ~0xf000;
 	data |= 0x3000;
 	mmio_write_32((0xf712c000 + 0x0d0), data);
+	isb();
+	dsb();
 	mmio_write_32((0xf712c000 + 0x004), 0x201);
+	isb();
+	dsb();
 	do {
 		data = mmio_read_32((0xf712c000 + 0x004));
 	} while (data & 1);
+	isb();
+	dsb();
 	data = mmio_read_32((0xf712c000 + 0x008));
 	if (data & 0x200)
 		tf_printf("INFO:    " "wdet rbs av fail\n");
-	mdelay(10);
+	isb();
+	dsb();
 }
 
 #ifndef DDR800
@@ -629,16 +765,15 @@ static void set_ddrc_800mhz(void)
 	data = mmio_read_32((0xf7032000 + 0x104));
 	data &= 0xfffffcff;
 	mmio_write_32((0xf7032000 + 0x104), data);
-	dsb();
-	mdelay(10);
 
 	mmio_write_32((0xf7030000 + 0x050), 0x30);
 	mmio_write_32((0xf7030000 + 0x240), 0x5ffff);
 	mmio_write_32((0xf7030000 + 0x344), 0xf5ff);
-	dsb();
 	mmio_write_32((0xf712c000 + 0x00c), 0x400);
-	mmio_write_32((0xf712c000 + 0x018), 0x7);
+	isb();
 	dsb();
+	mdelay(1);
+	mmio_write_32((0xf712c000 + 0x018), 0x7);
 	mmio_write_32((0xf712c000 + 0x090), 0x5400000);
 	mmio_write_32((0xf712c000 + 0x258), 0x540);
 	mmio_write_32((0xf712c000 + 0x2d8), 0x540);
@@ -649,10 +784,14 @@ static void set_ddrc_800mhz(void)
 	mmio_write_32((0xf712c000 + 0x0b4), 0xf);
 	mmio_write_32((0xf712c000 + 0x088), 0x3fff801);
 	mmio_write_32((0xf712c000 + 0x070), 0x8940000);
+	isb();
+	dsb();
 
 	data = mmio_read_32((0xf712c000 + 0x078));
 	data |= 4;
 	mmio_write_32((0xf712c000 + 0x078), data);
+	isb();
+	dsb();
 	mmio_write_32((0xf712c000 + 0x01c), 0x8000080);
 	data = mmio_read_32((0xf712c000 + 0x020));
 	data &= 0xfffffffe;
@@ -670,6 +809,8 @@ static void set_ddrc_800mhz(void)
 	mmio_write_32((0xf712c000 + 0x040), 0x3008aa1);
 	mmio_write_32((0xf712c000 + 0x064), 0x11a43);
 	mmio_write_32((0xf712c000 + 0x068), 0xff0a0000);
+	isb();
+	dsb();
 	data = mmio_read_32((0xf712c000 + 0x070));
 	data &= 0xffff0000;
 	data |= 0x507;
@@ -684,18 +825,31 @@ static void set_ddrc_800mhz(void)
 	data &= 0xffffdfff;
 	mmio_write_32((0xf712c000 + 0x080), data);
 	mmio_write_32((0xf712c000 + 0x270), 0x3);
+	isb();
+	dsb();
 	mmio_write_32((0xf712c000 + 0x2f0), 0x3);
+	isb();
+	dsb();
 	mmio_write_32((0xf712c000 + 0x370), 0x3);
+	isb();
+	dsb();
 	mmio_write_32((0xf712c000 + 0x3f0), 0x3);
+	isb();
+	dsb();
 	mmio_write_32((0xf712c000 + 0x048), 0xd0420900);
 	dsb();
 
 	mmio_write_32((0xf7128000 + 0x040), 0x2001);
+	isb();
+	dsb();
 	mmio_write_32((0xf712c000 + 0x004), 0x140f);
+	isb();
 	dsb();
 	do {
 		data = mmio_read_32((0xf712c000 + 0x004));
 	} while (data & 1);
+	isb();
+	dsb();
 	data = mmio_read_32((0xf712c000 + 0x008));
 	if (data & 0x7fe) {
 		WARN("failed to init lpddr3 rank0 dram phy\n");
@@ -709,23 +863,40 @@ static void ddrc_common_init(void)
 	unsigned int data;
 
 	mmio_write_32((0xf7120000 + 0x020), 0x1);
+	isb();
+	dsb();
 	mmio_write_32((0xf7120000 + 0x100), 0x1700);
+	isb();
+	dsb();
 	mmio_write_32((0xf7120000 + 0x104), 0x71040004);
+	isb();
 	dsb();
 	mmio_write_32((0xf7121400 + 0x104), 0xf);
+	isb();
 	dsb();
 	mmio_write_32((0xf7121800 + 0x104), 0xf);
+	isb();
+	dsb();
 	mmio_write_32((0xf7121800 + 0x104), 0xf);
+	isb();
 	dsb();
 	mmio_write_32((0xf7121c00 + 0x104), 0xf);
+	isb();
 	dsb();
 	mmio_write_32((0xf7122000 + 0x104), 0xf);
+	isb();
 	dsb();
 	mmio_write_32((0xf7128000 + 0x02c), 0x6);
+	isb();
+	dsb();
 	mmio_write_32((0xf7128000 + 0x020), 0x1);
+	isb();
+	dsb();
 	mmio_write_32((0xf7128000 + 0x028), 0x310201);
+	isb();
 	dsb();
 	mmio_write_32((0xf712c000 + 0x1e4), 0xfe007600);
+	isb();
 	dsb();
 	mmio_write_32((0xf7128000 + 0x01c), 0xaf001);
 
@@ -733,26 +904,34 @@ static void ddrc_common_init(void)
 	data = mmio_read_32((0xf7128000 + 0x280));
 	data |= 1 << 7;
 	mmio_write_32((0xf7128000 + 0x280), data);
+	isb();
+	dsb();
 	mmio_write_32((0xf7128000 + 0x244), 0x3);
+	isb();
+	dsb();
 
 #ifdef DDR800
 	mmio_write_32((0xf7128000 + 0x240), 167 * 400000 / 1024);
 #else
 	mmio_write_32((0xf7128000 + 0x240), 167 * 533000 / 1024);
 #endif
-
+	isb();
 	dsb();
 	data = mmio_read_32((0xf712c000 + 0x080));
 	data &= 0xffff;
 	data |= 0x4002000;
 	mmio_write_32((0xf712c000 + 0x080), data);
+	isb();
 	dsb();
 	mmio_write_32((0xf7128000 + 0x000), 0x0);
+	isb();
 	dsb();
 	do {
 		data = mmio_read_32((0xf7128000 + 0x294));
 	} while (data & 1);
 	mmio_write_32((0xf7128000 + 0x000), 0x2);
+	isb();
+	dsb();
 }
 
 
@@ -761,11 +940,19 @@ static int dienum_det_and_rowcol_cfg(void)
 	unsigned int data;
 
 	mmio_write_32((0xf7128000 + 0x210), 0x87);
+	isb();
+	dsb();
 	mmio_write_32((0xf7128000 + 0x218), 0x10000);
+	isb();
+	dsb();
 	mmio_write_32((0xf7128000 + 0x00c), 0x1);
+	isb();
+	dsb();
 	do {
 		data = mmio_read_32((0xf7128000 + 0x00c));
 	} while (data & 1);
+	isb();
+	dsb();
 	data = mmio_read_32((0xf7128000 + 0x4a8)) & 0xfc;
 	switch (data) {
 		case 0x18:
@@ -789,6 +976,8 @@ static int dienum_det_and_rowcol_cfg(void)
 		default:
 			break;
 	}
+	isb();
+	dsb();
 	if (!data)
 		return -22;
 	return 0;
@@ -801,6 +990,8 @@ static int detect_ddr_chip_info(void)
 	mmio_write_32((0xf7128000 + 0x210), 0x57);
 	mmio_write_32((0xf7128000 + 0x218), 0x10000);
 	mmio_write_32((0xf7128000 + 0x00c), 0x1);
+	isb();
+	dsb();
 
 	do {
 		data = mmio_read_32((0xf7128000 + 0x00c));
@@ -822,21 +1013,31 @@ static int detect_ddr_chip_info(void)
 			tf_printf("INFO:    " "DDR from other vendors\n");
 			break;
 	}
+	isb();
+	dsb();
 
 	mmio_write_32((0xf7128000 + 0x210), 0x67);
 	mmio_write_32((0xf7128000 + 0x218), 0x10000);
 	mmio_write_32((0xf7128000 + 0x00c), 0x1);
+	isb();
+	dsb();
 	do {
 		data = mmio_read_32((0xf7128000 + 0x00c));
 	} while (data & 1);
+	isb();
+	dsb();
 	data = mmio_read_32((0xf7128000 + 0x4a8));
 	mr6 = data & 0xff;
 	mmio_write_32((0xf7128000 + 0x210), 0x77);
 	mmio_write_32((0xf7128000 + 0x218), 0x10000);
 	mmio_write_32((0xf7128000 + 0x00c), 0x1);
+	isb();
+	dsb();
 	do {
 		data = mmio_read_32((0xf7128000 + 0x00c));
 	} while (data & 1);
+	isb();
+	dsb();
 	data = mmio_read_32((0xf7128000 + 0x4a8));
 	mr7 = data & 0xff;
 	data = mr5 + (mr6 << 8) + (mr7 << 16);
@@ -860,7 +1061,11 @@ static int lpddr3_freq_init(void)
 		tf_printf("NOTICE:  " "fail to set eye diagram\n");
 
 	mmio_write_32((0xf712c000 + 0x004), 0xf1);
+#ifdef DDR800
+	mmio_write_32((0xf7128000 + 0x050), 0x100023);
+#else
 	mmio_write_32((0xf7128000 + 0x050), 0x100123);
+#endif
 	mmio_write_32((0xf7128000 + 0x060), 0x133);
 	mmio_write_32((0xf7128000 + 0x064), 0x133);
 	mmio_write_32((0xf7128000 + 0x200), 0xa1000);
@@ -880,36 +1085,50 @@ static int lpddr3_freq_init(void)
 	mmio_write_32((0xf7128000 + 0x114), 0x13181908);
 #endif
 	mmio_write_32((0xf7128000 + 0x118), 0x44);
+	isb();
+	dsb();
 	do {
 		data = mmio_read_32((0xf712c000 + 0x004));
 	} while (data & 1);
+	isb();
+	dsb();
 
 	data = mmio_read_32((0xf712c000 + 0x008));
 	if (data & 0x7fe) {
-		tf_printf("NOTICE:  " "fail to init ddr3 rank0 in 533MHz\n");
+		tf_printf("NOTICE:  " "fail to init ddr3 rank0\n");
 		return -14;
 	}
-	tf_printf("INFO:    " "init ddr3 rank0 in 533MHz\n");
+	isb();
+	dsb();
+	tf_printf("INFO:    " "init ddr3 rank0\n");
 	ddrx_rdet();
 	ddrx_wdet();
 
 	data = mmio_read_32((0xf712c000 + 0x048));
 	data |= 1;
 	mmio_write_32((0xf712c000 + 0x048), data);
+	isb();
+	dsb();
 	mmio_write_32((0xf712c000 + 0x004), 0x21);
+	isb();
+	dsb();
 	do {
 		data = mmio_read_32((0xf712c000 + 0x004));
 	} while (data & 1);
+	isb();
+	dsb();
 
 	data = mmio_read_32((0xf712c000 + 0x008));
 	if (data & 0x7fe)
-		tf_printf("NOTICE:  " "ddr3 rank1 init faile in 533MHz\n");
+		tf_printf("NOTICE:  " "ddr3 rank1 init fail\n");
 	else
-		tf_printf("INFO:    " "ddr3 rank1 init pass in 533MHz\n");
+		tf_printf("INFO:    " "ddr3 rank1 init pass\n");
 
 	data = mmio_read_32((0xf712c000 + 0x048));
 	data &= ~0xf;
 	mmio_write_32((0xf712c000 + 0x048), data);
+	isb();
+	dsb();
 	return 0;
 }
 
@@ -922,23 +1141,26 @@ static void init_ddr(void)
 	data = mmio_read_32((0xf7032000 + 0x030));
 	data |= 1;
 	mmio_write_32((0xf7032000 + 0x030), data);
+	isb();
 	dsb();
-	mdelay(10);
 	data = mmio_read_32((0xf7032000 + 0x010));
 	data |= 1;
 	mmio_write_32((0xf7032000 + 0x010), data);
-
+	isb();
 	dsb();
-	mdelay(10);
 
 	do {
 		data = mmio_read_32((0xf7032000 + 0x030));
 		data &= 3 << 28;
 	} while (data != (3 << 28));
+	isb();
+	dsb();
 	do {
 		data = mmio_read_32((0xf7032000 + 0x010));
 		data &= 3 << 28;
 	} while (data != (3 << 28));
+	isb();
+	dsb();
 
 	ret = lpddr3_freq_init();
 	if (ret)
@@ -953,11 +1175,15 @@ static void init_ddr(void)
 	data = mmio_read_32(0xf7032000 + 0x010);
 	data &= ~0x1;
 	mmio_write_32(0xf7032000 + 0x010, data);
+	isb();
+	dsb();
 	data = mmio_read_32(0xf7032000 + 0x010);
 #else
 	data = mmio_read_32((0xf7032000 + 0x030));
 	data &= ~0x1;
 	mmio_write_32((0xf7032000 + 0x030), data);
+	isb();
+	dsb();
 	data = mmio_read_32((0xf7032000 + 0x030));
 #endif
 }
@@ -967,27 +1193,31 @@ static void init_ddrc_qos(void)
 	unsigned int port, data;
 
 	mmio_write_32((0xf7124000 + 0x088), 1);
-
+	isb();
+	dsb();
 
 	port = 0;
 	mmio_write_32((0xf7120000 + 0x200 + port * 0x10), 0x1210);
 	mmio_write_32((0xf7120000 + 0x204 + port * 0x10), 0x11111111);
 	mmio_write_32((0xf7120000 + 0x208 + port * 0x10), 0x11111111);
 	mmio_write_32((0xf7120000 + 0x400 + 0 * 0x10), 0x001d0007);
-
+	isb();
+	dsb();
 
 	for (port = 3; port <= 4; port++) {
 		mmio_write_32((0xf7120000 + 0x200 + port * 0x10), 0x1210);
 		mmio_write_32((0xf7120000 + 0x204 + port * 0x10), 0x77777777);
 		mmio_write_32((0xf7120000 + 0x208 + port * 0x10), 0x77777777);
 	}
-
+	isb();
+	dsb();
 
 	port = 1;
 	mmio_write_32((0xf7120000 + 0x200 + port * 0x10), 0x30000);
 	mmio_write_32((0xf7120000 + 0x204 + port * 0x10), 0x1234567);
 	mmio_write_32((0xf7120000 + 0x208 + port * 0x10), 0x1234567);
-
+	isb();
+	dsb();
 
 	mmio_write_32((0xf7124000 + 0x1f0), 0);
 	mmio_write_32((0xf7124000 + 0x0bc), 0x3020100);
@@ -996,27 +1226,40 @@ static void init_ddrc_qos(void)
 	mmio_write_32((0xf7124000 + 0x08c + 0 * 4), 0xd0670402);
 	mmio_write_32((0xf7124000 + 0x068 + 0 * 4), 0x31);
 	mmio_write_32((0xf7124000 + 0x000), 0x7);
+	isb();
+	dsb();
 
 	data = mmio_read_32((0xf7124000 + 0x09c));
 	data &= ~0xff0000;
 	data |= 0x400000;
 	mmio_write_32((0xf7124000 + 0x09c), data);
+	isb();
+	dsb();
 	data = mmio_read_32((0xf7124000 + 0x0ac));
 	data &= ~0xff0000;
 	data |= 0x400000;
 	mmio_write_32((0xf7124000 + 0x0ac), data);
+	isb();
+	dsb();
 	port = 2;
 	mmio_write_32((0xf7120000 + 0x200 + port * 0x10), 0x30000);
 	mmio_write_32((0xf7120000 + 0x204 + port * 0x10), 0x1234567);
 	mmio_write_32((0xf7120000 + 0x208 + port * 0x10), 0x1234567);
-
+	isb();
+	dsb();
 
 	mmio_write_32((0xf7124000 + 0x09c), 0xff7fff);
+	isb();
+	dsb();
 	mmio_write_32((0xf7124000 + 0x0a0), 0xff);
 	mmio_write_32((0xf7124000 + 0x0ac), 0xff7fff);
+	isb();
+	dsb();
 	mmio_write_32((0xf7124000 + 0x0b0), 0xff);
 	mmio_write_32((0xf7124000 + 0x0bc), 0x3020100);
 	mmio_write_32((0xf7124000 + 0x0d0), 0x3020100);
+	isb();
+	dsb();
 }
 
 static void init_mmc_pll(void)
@@ -1115,6 +1358,15 @@ static void init_media_clk(void)
 
 void hi6220_pll_init(void)
 {
+	mmio_write_32(0xf7030340, 0xa000);
+	isb();
+	dsb();
+	mdelay(1);
+	mmio_write_32(0xf7030344, 0xa000);
+	isb();
+	dsb();
+	mdelay(1);
+
 	init_pll();
 	init_freq();
 	init_ddr();
-- 
1.9.3

